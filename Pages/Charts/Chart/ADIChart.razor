@page "/chart/accumulation-distribution-indicator"
@using Newtonsoft.Json
@using Syncfusion.Blazor.Charts

@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
<SampleDescription>
  <p> This sample illustrates a stock chart with candle series and an accumulation distribution indicator. Trackball shows the information about the stock and signal value of a day.</p>  
</SampleDescription>
<ActionDescription>
   <p>In this example, you can see how to render and configure the Accumulation Distribution Indicator. You can use <code>Border</code>, <code>Fill</code> properties to customize the area.</p>
   <p>Tooltip is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.</p>
    <p>More information on the  Accumulation Distribution Indicator can be found in this <a target='_blank' href='https://ej2.syncfusion.com/documentation/api/chart/series/#type'>documentation section</a>.</p>
</ActionDescription>

@if (IndicatorData == null)
{
    <div class="stockchartloader"></div>
}
else
{
    <div class="control-section">
        <SfChart Title="AAPL - 2012-2017" Theme="@Theme">
            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" Title="months" IntervalType="IntervalType.Months" ZoomFactor="0.2" ZoomPosition="0.6">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                <ChartAxisCrosshairTooltip Enable="true"></ChartAxisCrosshairTooltip>
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis Title="Price" LabelFormat="${value}" Minimum="50"
                               Maximum="170" PlotOffset="25" Interval="30" RowIndex="1" OpposedPosition="true">
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            </ChartPrimaryYAxis>
            <ChartAxes>
                <ChartAxis Name="secondary" OpposedPosition="true" RowIndex="0" Interval="6000000000"
                           Minimum="-7000000000" Maximum="5000000000" Title="Accumulation Distribution">
                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                    <ChartStriplines>
                            <ChartStripline ZIndex="ZIndex.Behind" Start="-7000000000" End="6000000000" Text="" Color="#6063ff" Visible="true" Opacity="0.1"></ChartStripline>
                    </ChartStriplines>
                </ChartAxis>
            </ChartAxes>
            <ChartRows>
                <ChartRow Height="40%"></ChartRow>
                <ChartRow Height="60%"></ChartRow>
            </ChartRows>
            <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
            <ChartLegendSettings Visible="false"></ChartLegendSettings>
            <ChartArea>
                <ChartAreaBorder Width="0"></ChartAreaBorder>
            </ChartArea>
            <ChartZoomSettings EnablePinchZooming="true" EnableSelectionZooming="true" Mode="ZoomMode.X"></ChartZoomSettings>
            <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical"></ChartCrosshairSettings>
            <ChartSeriesCollection>
                <ChartSeries DataSource="@IndicatorData" XName="x" Low="low" High="high" Close="close" Volume="volume" Open="open"
                             Width="2" Name="Apple Inc" Type="ChartSeriesType.Candle" BearFillColor="#2ecd71" BullFillColor="#e74c3d">
                </ChartSeries>
            </ChartSeriesCollection>
            <ChartIndicators>
                <ChartIndicator Type="TechnicalIndicators.AccumulationDistribution" Field="FinancialDataFields.Close" SeriesName="Apple Inc" YAxisName="secondary" Fill="#6063ff" Period="3">
                </ChartIndicator>
            </ChartIndicators>
        </SfChart>
    </div>
}
@code{
    private ChartData[] IndicatorData;
    private Syncfusion.Blazor.Theme Theme { get; set; }
    string CurrentUri;
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
        {
            IndicatorData = JsonConvert.DeserializeObject<ChartData[]>(System.IO.File.ReadAllText("./wwwroot/data/chart/financial-data.json"));
        });
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.HighContrast;
        }
        else
        {
            Theme = Syncfusion.Blazor.Theme.Bootstrap4;
        }
    }
    public class ChartData
    {
        public DateTime x { get; set; }
        public double high { get; set; }
        public double low { get; set; }
        public double open { get; set; }
        public double close { get; set; }
        public double volume { get; set; }
    }
}
