@page "/chart/rounded-column"
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
<SampleDescription>
    <p>This sample visualizes the Olympic medal count in Rio with default column series in the chart.Data points values are showed by using data label.</p>
</SampleDescription>
<ActionDescription>
   <p>In this example, you can see how to render and configure the column type charts. Column type charts are used for comparing the frequency, count, total or average of data in different categories. 
       You can use <code>Border</code>,<code>Fill</code> properties to customize the vertical rect. <code>DataLabel</code> is used to represent individual data and its value.
    </p>
    <p>Tooltip is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.</p>
</ActionDescription>

    <div class="control-section">
        <SfChart Title="Trade in Food Groups" Theme="@Theme">
            <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
            <ChartPrimaryXAxis TickPosition="AxisPosition.Inside" LabelPosition="AxisPosition.Inside" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                <ChartAxisLabelStyle Color="#ffffff"></ChartAxisLabelStyle>
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis Minimum="0" Maximum="300" Interval="50">
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                <ChartAxisLabelStyle Color="transparent"></ChartAxisLabelStyle>
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
            </ChartPrimaryYAxis>
            <ChartSeriesCollection>
                <ChartSeries DataSource="@ChartData" XName="x" YName="y" Name="Tiger" Type="ChartSeriesType.Column">
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Position="LabelPosition.Top">
                            <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                        </ChartDataLabel>
                    </ChartMarker>
                    <ChartCornerRadius BottomLeft="10" BottomRight="10" TopLeft="10" TopRight="10"></ChartCornerRadius>
                </ChartSeries>
            </ChartSeriesCollection>
            <ChartTooltipSettings Enable="false"></ChartTooltipSettings>
            <ChartLegendSettings Visible="false"></ChartLegendSettings>
        </SfChart>
    </div>

@code{

    public class RoundedColumnChartData
    {
        public string x { get; set; }
        public double y{ get; set; }
        public string text { get; set; }
    }

    public List<RoundedColumnChartData> ChartData = new List<RoundedColumnChartData>
            {
                  new RoundedColumnChartData { x= "Egg", y= 106, text= "Egg" },
                  new RoundedColumnChartData { x= "Fish", y= 103, text= "Fish" },
                  new RoundedColumnChartData { x= "Misc", y= 198, text= "Misc" },
                  new RoundedColumnChartData { x= "Tea", y= 189, text= "Tea" },
                  new RoundedColumnChartData { x= "Fruits", y= 250, text= "Fruits" }
            };

    string CurrentUri;
    private Syncfusion.Blazor.Theme Theme { get; set; }
    protected override void OnInitialized()
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.HighContrast;
        }
        else
        {
            Theme = Syncfusion.Blazor.Theme.Bootstrap4;
        }
    }
}
