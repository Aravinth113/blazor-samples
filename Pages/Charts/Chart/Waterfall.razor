@page "/chart/waterfall"
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;

<SampleDescription>
    <p>This sample visualizes the revenue and profits of a company by using default waterfall series in the chart. Tooltip shows the information about the profits earned by each department on the company.</p>
</SampleDescription>
<ActionDescription>
   <p>In this example, you can see how to render and configure the Waterfall type chart. You can use <code>DashArray</code>, <code>Width</code>, <code>Fill</code> properties to customize the Column. <code>DataLabel</code> are used to represent individual data and its value.</p>
   <p>Tooltip is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.</p>
   <p>More information on the Waterfall series can be found in this <a target='_blank' href='https://ej2.syncfusion.com/documentation/api/chart/series/#type'>documentation section</a>.</p>
</ActionDescription>

<div class="control-section">
    <SfChart Title="Company Revenue and Profit" Theme="@Theme">
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" PlotOffset="20">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Minimum="0" Maximum="5000" Interval="1000" Title="Expenditure">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryYAxis>
        <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
        <ChartLegendSettings Visible="false"></ChartLegendSettings>
        <ChartSeriesCollection>
            <ChartSeries NegativeFillColor="#e56590" DataSource="@ChartData" Name="USA" XName="x" Width="2" IntermediateSumIndexes="@IntermediateSumIndexes"
                         SumIndexes="@SumIndexes" YName="y" Type="ChartSeriesType.Waterfall">
                <ChartMarker>
                    <ChartDataLabel Visible="true">
                        <ChartDataLabelFont Color="#ffffff"></ChartDataLabelFont>
                    </ChartDataLabel>
                </ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartEvents OnAxisLabelRender="AxisLabelRender"></ChartEvents>
    </SfChart>
</div>

@code{

    public class WaterfallChartData
    {
        public string x { get; set; }
        public double y { get; set; }
    }
    public List<WaterfallChartData> ChartData = new List<WaterfallChartData>
        {
                    new WaterfallChartData { x= "Income", y= 4711 },
                    new WaterfallChartData { x= "Sales", y= -1015 },
                    new WaterfallChartData { x= "Development", y= -688 },
                    new WaterfallChartData { x= "Revenue", y= 1030 },
                    new WaterfallChartData { x= "Balance" },
                    new WaterfallChartData { x= "Expense", y= -361 },
                    new WaterfallChartData { x= "Tax", y= -695 },
                    new WaterfallChartData { x= "Net Profit" }
            };

    Double[] IntermediateSumIndexes = new Double[] { 4 };
    Double[] SumIndexes = new Double[] { 7 };

    string CurrentUri;
    private Syncfusion.Blazor.Theme Theme { get; set; }
    protected override void OnInitialized()
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.HighContrast;
        }
        else
        {
            Theme = Syncfusion.Blazor.Theme.Bootstrap4;
        }
    }
    public void AxisLabelRender(AxisLabelRenderEventArgs args)
    {
        if (args.Axis.Name == "PrimaryYAxis")
        {
            args.Text = "$" + Convert.ToDouble(args.Text) / 1000 + "B";
        }
    }
}
<style>

    #control-container {
        padding: 0px !important;
    }

    #waterfall_Series_0_Connector_ {
        stroke-dasharray: 10px 10px;
        stroke-linejoin: round;
        stroke-linecap: round;
        -webkit-animation: dash 1s linear infinite;
        animation: dash 1s linear infinite;
    }

    @@-webkit-keyframes dash {
        100% {
            stroke-dashoffset: -20px;
        }
    }

    @@keyframes dash {
        100% {
            stroke-dashoffset: -20px;
        }
    }
</style>

