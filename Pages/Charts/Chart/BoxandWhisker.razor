@page "/chart/box-and-whisker"
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using PointRender
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;

<SampleDescription>
    <p> This sample visualizes the employees’ age group in various departments of a country with box and whisker type series in the chart. Mode of box and whisker series can be changed by <code>Mode</code> in property panel. To display the <code>Mean</code> value in a series, enable the Mean in the property panel.</p>
</SampleDescription>
<ActionDescription>
    <p>
        In this example, you can see how to render and configure the box and whisker type charts. Similar to line type series, but
        the area get closed and filled with series color. You can use <code>Border</code>, <code>Fill</code> properties
        to customize the area. <code>Marker</code> and <code>DataLabel</code> are used to represent individual data and its
        value. Legend is enabled in this example with series type shape.
    </p>
    <p>Tooltip is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.</p>
    <p> More information on this series can be found in this <a target='_blank' href='https://ej2.syncfusion.com/documentation/api/chart/series/#type'>documentation section</a>.</p>
</ActionDescription>

<div class="row">
    <div class="col-lg-8 control-section">
        <SfChart @ref="@ChartObj" Title="Employee Age Group in Various Department" Theme="@Theme">
            <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
            <ChartPrimaryXAxis EdgeLabelPlacement="EdgeLabelPlacement.Shift" LabelIntersectAction="LabelIntersectAction.Trim" ValueType="Syncfusion.Blazor.Charts.ValueType.Category">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis Minimum="10" Maximum="60" Interval="10" Title="Age">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            </ChartPrimaryYAxis>
            <ChartSeriesCollection>
                <ChartSeries DataSource="@ChartData" XName="x" YName="y" Name="Department" BoxPlotMode="@BoxPlot" ShowMean="@Mean" Type="ChartSeriesType.BoxAndWhisker">
                    <ChartMarker Visible="true" Height="10" Width="10"></ChartMarker>
                </ChartSeries>
            </ChartSeriesCollection>
            <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
            <ChartEvents OnPointRender="PointRender"></ChartEvents>
        </SfChart>
    </div>
    <div class="col-lg-4 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tr style="height:50px"><th>Properties</th></tr>
            @*<tr style="height: 50px">
                    <td style="width: 60%">
                        <div>
                            Mode:
                        </div>
                    </td>
                    <td style="width: 40%;">
                        <SfDropDownList TValue="string" Placeholder="Normal" TItem="Data" DataSource="@DropDowmData" @bind-Value="@DropVal" >
                            <DropDownListFieldSettings Value="ID"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="string" ValueChange="ChangeType"></DropDownListEvents>
                        </SfDropDownList>
                    </td>
                </tr>*@
            <tr style="height: 50px">
                <td style="width: 50%">
                    <div>Mean: </div>
                </td>
                <td style="width: 50%;">
                    <div>
                        <SfCheckBox Checked="@Mean" ValueChange="@IsChecked" TChecked="bool"></SfCheckBox>
                    </div>
                </td>
            </tr>
        </table>
    </div>
</div>
@code{
    SfChart ChartObj;
    public bool Mean = true;
    BoxPlotMode BoxPlot = BoxPlotMode.Normal;

    public void ChangeMode(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        this.BoxPlot = (BoxPlotMode)Enum.Parse(typeof(BoxPlotMode), args.Value.ToString(), true);
    }

    private void IsChecked(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        Mean = args.Checked;
    }

    public class Data
    {
        public string ID { get; set; }
    }

    private List<Data>
    DropDowmData = new List<Data>
        ()
        {
        new Data(){ ID= "Normal"},
        new Data(){ ID= "Exclusive"},
        new Data(){ ID= "Inclusive"}
            };

    private void ChangeType(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string>
        args)
    {
        this.BoxPlot = (BoxPlotMode)Enum.Parse(typeof(BoxPlotMode), args.Value.ToString(), true);
    }

    public class BoxandWhiskerData
    {
        public string x { get; set; }
        public double[] y { get; set; }
    }
    public List<BoxandWhiskerData>
        ChartData = new List<BoxandWhiskerData>
            {
                    new BoxandWhiskerData { x= "Development", y= new double[]{ 22, 22, 23, 25, 25, 25, 26, 27, 27, 28, 28, 29, 30, 32, 34, 32, 34, 36, 35, 38 }},
                    new BoxandWhiskerData { x= "Testing", y= new double[] { 22, 33, 23, 25, 26, 28, 29, 30, 34, 33, 32, 31, 50 }},
                    new BoxandWhiskerData { x= "HR", y= new double[] { 22, 24, 25, 30, 32, 34, 36, 38, 39, 41, 35, 36, 40, 56 } },
                    new BoxandWhiskerData { x= "Finance", y= new double[] { 26, 27, 28, 30, 32, 34, 35, 37, 35, 37, 45 } },
                    new BoxandWhiskerData { x= "R&D", y= new double[] { 26, 27, 29, 32, 34, 35, 36, 37, 38, 39, 41, 43, 58 }},
                    new BoxandWhiskerData { x= "Sales", y= new double[] { 27, 26, 28, 29, 29, 29, 32, 35, 32, 38, 53 }},
                    new BoxandWhiskerData { x= "Inventory", y= new double[] { 21, 23, 24, 25, 26, 27, 28, 30, 34, 36, 38 }},
                    new BoxandWhiskerData { x= "Graphics", y= new double[] { 26, 28, 29, 30, 32, 33, 35, 36, 52 }},
                    new BoxandWhiskerData { x= "Training", y= new double[] { 28, 29, 30, 31, 32, 34, 35, 36 }}
                };

    string CurrentUri;
    private Syncfusion.Blazor.Theme Theme { get; set; }
    protected override void OnInitialized()
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.HighContrast;
        }
        else
        {
            Theme = Syncfusion.Blazor.Theme.Bootstrap4;
        }
    }
    public void PointRender(PointRenderEventArgs args)
    {
        if (CurrentUri.IndexOf("material") > -1)
        {
            args.Fill = PointColor.MaterialColors[args.Point.Index % 10];
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            args.Fill = PointColor.FabricColors[args.Point.Index % 10];
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            args.Fill = PointColor.HighContrastColors[args.Point.Index % 10];
        }

    }
}
