@page "/chart/pie-empty-points"
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.DropDowns
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;

<SampleDescription>
    <p>This sample illustrates an organization’s annual product-wise profit analysis with the empty point functionality in pie series.</p>
</SampleDescription>
<ActionDescription>
   <p>In this example, you can see how to render and configure the empty points. You can use <code>Border</code>, <code>Fill</code>, <code>Mode</code> properties to customize the empty points.Tooltip is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.</p>
   <p>More information on the empty points can be found in this <a target='_blank' href='https://ej2.syncfusion.com/documentation/api/chart/series/#type'>documentation section</a>.</p>
</ActionDescription>

<div class="row">
    <div class="col-lg-8 control-section">
        <SfAccumulationChart Title="Annual Product-Wise Profit Analysis" Theme="@Theme">
            <AccumulationChartTooltipSettings Enable="true" Format="${point.x} : <b>${point.y}</b>"></AccumulationChartTooltipSettings>

            <AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>

            <AccumulationChartSeriesCollection>
                <AccumulationChartSeries DataSource="@DataSource" Name="Profit" XName="XValue" YName="YValue" Type="AccumulationType.Pie">
                    <AccumulationChartEmptyPointSettings Mode="@Mode" Fill="#e6e6e6"></AccumulationChartEmptyPointSettings>
                    <AccumulationDataLabelSettings Visible="true" Position="AccumulationLabelPosition.Inside"></AccumulationDataLabelSettings>
                </AccumulationChartSeries>
            </AccumulationChartSeriesCollection>
        </SfAccumulationChart>
    </div>
    <div class="col-lg-4 property-section">
        <table title="Properties" style="width: 100%">
            <tr style="height:50px"><th>Properties</th></tr>
            <tr style="height:50px">
                <td style="font-size:14px">
                    Empty Point Mode:
                </td>
                <td>
                    <SfDropDownList TValue="string" TItem="SelectionTypes" @bind-Value="@DropVal" DataSource="@ModeData">
                        <DropDownListEvents TValue="string" TItem="SelectionTypes" ValueChange="ChangeEmptyPointMode"></DropDownListEvents>
                        <DropDownListFieldSettings Value="Type"></DropDownListFieldSettings>
                    </SfDropDownList>
                </td>
            </tr>
        </table>
    </div>
</div>
@code{


    EmptyPointMode Mode = EmptyPointMode.Drop;
    public string DropVal = "Drop";

    public class SelectionTypes
    {
        public string Type { get; set; }

        public string Code { get; set; }
    }

    List<SelectionTypes> ModeData = new List<SelectionTypes>
{
        new SelectionTypes() { Type = "Drop", Code = "XY" },
        new SelectionTypes() { Type = "Zero", Code = "X" },
        new SelectionTypes() { Type = "Average", Code = "Y" }

    };
    private void ChangeEmptyPointMode(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, SelectionTypes> args)
    {
        if (args.Value.ToString() == "Zero")
        {
            Mode = EmptyPointMode.Zero;
        }
        else if (args.Value.ToString() == "Average")
        {
            Mode = EmptyPointMode.Average;
        }
        else
        {
            Mode = EmptyPointMode.Drop;
        }
    }

    public class ChartData
    {
        public string XValue { get; set; }
        public double? YValue { get; set; }
        public string Text { get; set; }
    }

    public List<ChartData> DataSource = new List<ChartData>
{
        new ChartData { XValue = "Rice", YValue = 80 },
        new ChartData { XValue = "Wheat", YValue = null },
        new ChartData { XValue = "Oil", YValue = 70 },
        new ChartData { XValue = "Corn", YValue = 60 },
        new ChartData { XValue = "Gram", YValue = null },
        new ChartData { XValue = "Milk", YValue = 70 },
        new ChartData { XValue = "Peas", YValue = 80 },
        new ChartData { XValue = "Fruit", YValue = 60 },
        new ChartData { XValue = "Butter", YValue = null }
    };

    string CurrentUri;
    private Syncfusion.Blazor.Theme Theme { get; set; }
    protected override void OnInitialized()
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.HighContrast;
        }
        else
        {
            Theme = Syncfusion.Blazor.Theme.Bootstrap4;
        }
    }
}