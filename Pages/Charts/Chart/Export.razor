@page "/chart/export"
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Buttons
@using PointRender
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;

<SampleDescription>
    <p> This sample illustrates the export feature in chart. By clicking <code>Export</code>, you can export the chart in PNG or JPEG format.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure the export. The rendered chart can be exported as either JPEG, PNG and SVG format. It can be achieved using Blob and it's supported only in modern browsers. </p>
    <p>More information on the Export can be found in this <a target='_blank' href='https://ej2.syncfusion.com/documentation/api/chart/series/#type'>documentation section</a>.</p>
</ActionDescription>

<div class="row">
    <div class="control-section col-lg-9" align="center">

        <SfChart @ref="ChartObj" Title="Top 10 Countries Using Solar Power" Theme="@Theme">
            <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
            <ChartPrimaryXAxis Title="Country" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis Minimum="0" Maximum="40" Interval="10" Title="Measurements" LabelFormat="{value}GW">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            </ChartPrimaryYAxis>
            <ChartSeriesCollection>
                <ChartSeries DataSource="@DataSource" XName="xValue" YName="yValue" Type="ChartSeriesType.Column">
                </ChartSeries>
            </ChartSeriesCollection>
            <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
            <ChartEvents OnPointRender="PointRender"></ChartEvents>
        </SfChart>
    </div>
    <div class="col-lg-3 property-section" align="center">
        <table style="width: 100%">
            <tr style="height:50px"><th>Properties</th></tr>
            <tbody>
                <tr id="button-control" style="height: 50px" align="center">
                    <td>
                        <SfButton @onclick="ExportChart" Content="Export" CssClass="e-flat" IsPrimary="true"></SfButton>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
@code{
    SfChart ChartObj;
    public class ExportData
    {
        public string xValue { get; set; }
        public double yValue { get; set; }
    }
    public List<ExportData> DataSource = new List<ExportData>
{
        new ExportData {xValue="DEZ", yValue = 35.5},
        new ExportData {xValue="CHN", yValue = 18.3},
        new ExportData {xValue="ITA", yValue = 17.6},
        new ExportData {xValue="JPN", yValue = 13.6},
        new ExportData {xValue="US", yValue = 12},
        new ExportData {xValue="ESP", yValue = 5.6},
        new ExportData {xValue="FRA", yValue = 4.6},
        new ExportData {xValue="AUS", yValue = 3.3},
        new ExportData {xValue="BEL", yValue = 3},
        new ExportData {xValue="UK", yValue = 2.9},
    };
    public void ExportChart(MouseEventArgs args)
    {
        ChartObj.Export(ExportType.PNG, "Chart");
    }

    string CurrentUri;
    private Syncfusion.Blazor.Theme Theme { get; set; }
    protected override void OnInitialized()
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.HighContrast;
        }
        else
        {
            Theme = Syncfusion.Blazor.Theme.Bootstrap4;
        }
    }
    public void PointRender(PointRenderEventArgs args)
    {
        if (CurrentUri.IndexOf("material") > -1)
        {
            args.Fill = PointColor.MaterialColors[args.Point.Index % 10];
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            args.Fill = PointColor.FabricColors[args.Point.Index % 10];
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            args.Fill = PointColor.HighContrastColors[args.Point.Index % 10];
        }

    }
}
<style>
    #control-container {
        padding: 0px !important;
    }

    .e-play-icon::before {
        content: '\e720';
    }
</style>
