@page "/chart/multi-series-chart"
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
<SampleDescription>
    <p> This sample illustrates a combination of line and stacked column series. Tooltip shows the information about the data point.</p>
</SampleDescription>
<ActionDescription>
   <p><p>In this example, you can see how to render and configure the different type of charts. You can render any combination of series in chart except bar.</p>
    <p>Tooltip is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.</p>
    <p>More information on the series can be found in this <a target='_blank' href='https://ej2.syncfusion.com/documentation/api/chart/series/#type'>documentation section</a>.</p></p>
</ActionDescription>

<div class="control-section">
    <SfChart Title="Annual Growth GDP in France" Theme="@Theme">
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartPrimaryXAxis LabelIntersectAction="LabelIntersectAction.Rotate45" Title="Years" Interval="1" ValueType="Syncfusion.Blazor.Charts.ValueType.Category">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Title="Growth" Minimum="-3" Maximum="3" Interval="1" LabelFormat="{value}B">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@DataSource" Name="Private Consumption" XName="x" YName="y" Type="ChartSeriesType.StackingColumn">
            </ChartSeries>
            <ChartSeries DataSource="@DataSource" Name="Government Consumption" XName="x" YName="y1" Type="ChartSeriesType.StackingColumn">
            </ChartSeries>
            <ChartSeries DataSource="@DataSource" Name="Investment" XName="x" YName="y2" Type="ChartSeriesType.StackingColumn">
            </ChartSeries>
            <ChartSeries DataSource="@DataSource" Name="Net Foreign Trade" XName="x" YName="y3" Type="ChartSeriesType.StackingColumn">
            </ChartSeries>
            <ChartSeries DataSource="@DataSource" Name="GDP" XName="x" YName="y4" Width="2" Opacity="0.6" Type="ChartSeriesType.Line">
                <ChartMarker Visible="true" Height="10" Width="10"></ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
    </SfChart>
</div>

@code{

    public class CombinationSeriesData
    {
        public string x { get; set; }
        public double y { get; set; }
        public double y1 { get; set; }
        public double y2 { get; set; }
        public double y3 { get; set; }
        public double y4 { get; set; }
    }
    public List<CombinationSeriesData> DataSource =  new List<CombinationSeriesData> {
                new CombinationSeriesData { x= "2005", y= 1.2, y1= 0.5, y2= 0.7, y3= -0.8, y4= 1.5 },
                new CombinationSeriesData { x= "2006", y= 1, y1= 0.5, y2= 1.4, y3= 0, y4= 2.3 },
                new CombinationSeriesData { x= "2007", y= 1, y1= 0.5, y2= 1.5, y3= -1, y4= 2 },
                new CombinationSeriesData { x= "2008", y= 0.25, y1= 0.35, y2= 0.35, y3= -.35, y4= 0.1 },
                new CombinationSeriesData { x= "2009", y= 0.1, y1= 0.9, y2= -2.7, y3= -0.3, y4= -2.7 },
                new CombinationSeriesData { x= "2010", y= 1, y1= 0.5, y2= 0.5, y3= -0.5, y4= 1.8 },
                new CombinationSeriesData { x= "2011", y= 0.1, y1= 0.25, y2= 0.25, y3= 0, y4= 2 },
                new CombinationSeriesData { x= "2012", y= -0.25, y1= -0.5, y2= -0.1, y3= -0.4, y4= 0.4 },
                new CombinationSeriesData { x= "2013", y= 0.25, y1= 0.5, y2= -0.3, y3= 0, y4= 0.9 },
                new CombinationSeriesData { x= "2014", y= 0.6, y1= 0.6, y2= -0.6, y3= -0.6, y4= 0.4 },
                new CombinationSeriesData { x= "2015", y= 0.9, y1= 0.5, y2= 0, y3= -0.3, y4= 1.3 }
        };

    string CurrentUri;
    private Syncfusion.Blazor.Theme Theme { get; set; }
    protected override void OnInitialized()
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.HighContrast;
        }
        else
        {
            Theme = Syncfusion.Blazor.Theme.Bootstrap4;
        }
    }
}
