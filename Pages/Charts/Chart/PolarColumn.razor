@page "/chart/polar-column"
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.DropDowns
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
<SampleDescription>
   <p> This sample demonstrates polar series with column type for mobile market subscriptions in different countries.The switching between polar and radar series can be done by using <code>SeriesType</Code> in property panel.</p> 
</SampleDescription>
<ActionDescription>
   <p> In this example, you can see how to render and configure the column type charts. Column type charts are used for comparing the frequency, count, total or average of data in different categories. You can use <code>Border</code>, <code>Fill</code> properties to customize the vertical rect. <code>DataLabel</code> is used to represent individual data and its value.</p>
   <p>Tooltip is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.</p>
   <p>More information on the polar series can be found in this <a target='_blank' href='https://ej2.syncfusion.com/documentation/api/chart/series/#type'>documentation section</a>.</p>
</ActionDescription>

<div class="row">
<div class="col-lg-9 control-section">
    <SfChart Title="Top 10 Mobile Markets by Number of Subscriptions" Theme="@Theme">
        <ChartPrimaryXAxis Interval="1" Coefficient="100" LabelPlacement="LabelPlacement.OnTicks" ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
        <ChartPrimaryYAxis LabelFormat="{value}M"></ChartPrimaryYAxis>
        <ChartTooltipSettings Enable="true">
        </ChartTooltipSettings>
        <ChartLegendSettings Visible="true">
        </ChartLegendSettings>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@DataSource" Name="Mobile Subscriptions" XName="x" Width="2" YName="y" Type="@SeriesType" DrawType="ChartDrawType.Column">
                <ChartSeriesBorder Color="white" Width="1"></ChartSeriesBorder>
                <ChartMarker>
                    <ChartDataLabel Name="text"></ChartDataLabel>
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@DataSource" Name="Population in Millions" XName="x" Width="2" YName="y1" Type="@SeriesType" DrawType="ChartDrawType.Column">
                <ChartSeriesBorder Color="white" Width="1"></ChartSeriesBorder>
                <ChartMarker>
                    <ChartDataLabel Name="text"></ChartDataLabel>
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@DataSource" Name="3G/4G Subscriptions" XName="x" Width="2" YName="y2" Type="@SeriesType" DrawType="ChartDrawType.Column">
                <ChartSeriesBorder Color="white" Width="1"></ChartSeriesBorder>
                <ChartMarker>
                    <ChartDataLabel Name="text"></ChartDataLabel>
                </ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
</div>
    <div class="col-lg-3 property-section">
        <table style="width: 100%">
            <tr style="height:50px"><th>Properties</th></tr>
            <tr style="height: 50px">
                <td style="width: 50%">
                    <div>
                        Series Type:
                    </div>
                </td>
                <td style="width: 50%;">
                    <SfDropDownList TValue="string" TItem="SeriesTypes" @bind-Value="@DropVal" DataSource="@Country">
                        <DropDownListEvents TValue="string" TItem="SeriesTypes" ValueChange="ChangeSeriesType"></DropDownListEvents>
                        <DropDownListFieldSettings Value="Type"></DropDownListFieldSettings>
                    </SfDropDownList>
                </td>
            </tr>
        </table>
    </div>
</div>
@code{
    public string DropVal = "Polar";

    public class SeriesTypes
    {
        public string Type { get; set; }

        public string Code { get; set; }
    }

    List<SeriesTypes> Country = new List<SeriesTypes>
{
        new SeriesTypes() { Type = "Polar", Code = "P" },
        new SeriesTypes() { Type = "Radar", Code = "R" },
    };

    ChartSeriesType SeriesType = ChartSeriesType.Polar;
    public void ChangeSeriesType(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, SeriesTypes> args)
    {
        this.SeriesType = (ChartSeriesType)Enum.Parse(typeof(ChartSeriesType), args.Value.ToString(), true);
        StateHasChanged();
    }



    public class PolarColumnData
    {
        public string text { get; set; }
        public string x { get; set; }
        public double y { get; set; }
        public double y1 { get; set; }
        public double y2 { get; set; }
    }
    public List<PolarColumnData> DataSource = new List<PolarColumnData>
        {
                new PolarColumnData { text= "Japan", x= "JPN", y= 137.9, y1= 127.6, y2= 108.8 },
                new PolarColumnData { text= "Indonesia", x= "IDN", y= 85.0, y1= 246.9, y2= 45.5 },
                new PolarColumnData { text= "Russia", x= "RUS", y= 237.1, y1= 143.5, y2= 41.2 },
                new PolarColumnData { text= "Vietnam", x= "VNM", y= 127.7, y1= 88.8, y2= 18.0 },
                new PolarColumnData { text= "Pakistan", x= "PAK", y= 126.1, y1= 179.2 },
                new PolarColumnData { text= "Nigeria", x= "NGA", y= 175.0, y1= 168.8, y2= 12.7 },
                new PolarColumnData { text= "Germany", x= "DEU", y= 113.6, y1= 81.9, y2= 46.0 },
                new PolarColumnData { text= "Bangladesh", x= "BGS", y= 116.0, y1= 154.7, y2= 34.6 },
                new PolarColumnData { text= "Philippines", x= "PHL", y= 109.5, y1= 96.7, y2= 16.6 },
                new PolarColumnData { text= "Mexico", x= "MEX", y= 102.7, y1= 120.8, y2= 19.8 }
            };
    string CurrentUri;
    private Syncfusion.Blazor.Theme Theme { get; set; }
    protected override void OnInitialized()
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Theme = Syncfusion.Blazor.Theme.HighContrast;
        }
        else
        {
            Theme = Syncfusion.Blazor.Theme.Bootstrap4;
        }
    }
}