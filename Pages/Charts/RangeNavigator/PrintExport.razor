@page "/range-selector/print-export"
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor
@using Newtonsoft.Json
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;

<SampleDescription>
    <p>This sample represents the print and export options available in the range navigator.</p>
</SampleDescription>
<ActionDescription>
    <p></p>
</ActionDescription>

@if (ExportData == null)
{
    <div class="stockchartloader"></div>
}
else
{
    <div class="row">
        <div class="col-lg-9 control-section" align="center">
            <h4 align="center" style="font-family: Segoe UI;font-weight: 500; font-style:normal; font-size:15px;"> Mobile Sales Trends - 2017</h4>
            <div>
                <SfRangeNavigator @ref="RangeObj" Value="@Value" LabelFormat="MMM" EnableGrouping="true" IntervalType="RangeIntervalType.Months"
                                  DataSource="@ExportData" XName="xDate" YName="Close" ValueType="Syncfusion.Blazor.Charts.RangeValueType.DateTime">
                    <RangeNavigatorEvents Loaded="BeforeRender" Changed="OnRangeChanged"></RangeNavigatorEvents>
                </SfRangeNavigator>
            </div>
        </div>
        <div class="col-lg-3 property-section" style="margin-top:40px">
            <table>
                <tbody>
                    <tr align="center">
                        <td>
                            <div>
                                <Syncfusion.Blazor.Buttons.SfButton Content="Print" @onclick="PrintRangeNavigator" IsPrimary="true" CssClass="e-flat btn-style"></Syncfusion.Blazor.Buttons.SfButton>
                            </div>
                        </td>
                    </tr>
                    <tr align='center'>
                        <td colspan="2">
                            <div>
                                <Syncfusion.Blazor.Buttons.SfButton Content="Export" @onclick="ExportRangeNavigator" IsPrimary="true" CssClass="e-flat btn-style"></Syncfusion.Blazor.Buttons.SfButton>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
}
@code{
    private ChartData[] ExportData;
    SfRangeNavigator RangeObj;
    double ZF = 1;
    double ZP = 0;
    private Theme theme { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
        {
            ExportData = JsonConvert.DeserializeObject<ChartData[]>(System.IO.File.ReadAllText("./wwwroot/data/range-navigator/export-data.json"));
        });
    }
    public class ChartData
    {
        public DateTime xDate { get; set; }
        public double Open { get; set; }
        public double High { get; set; }
        public double Low { get; set; }
        public double Close { get; set; }
    }
    private object[] Value = new object[] { new DateTime(2013, 05, 01), new DateTime(2013, 08, 01) };
    protected void OnRangeChanged(ChangedEventArgs args)
    {
        ZF = args.ZoomFactor;
        ZP = args.ZoomPosition;
        StateHasChanged();
    }
    public void PrintRangeNavigator(MouseEventArgs args)
    {
        RangeObj.Print();
    }
    public void ExportRangeNavigator(MouseEventArgs args)
    {
        RangeObj.Export(ExportType.PNG, "Chart");
    }
    string CurrentUri;
    void BeforeRender(RangeLoadedEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = Theme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = Theme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = Theme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = Theme.HighContrast;
        }
        else
        {
            Args.Theme = Theme.Bootstrap4;
        }
    }
    protected override void OnInitialized()
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            theme = Theme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            theme = Theme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap4") > -1)
        {
            theme = Theme.Bootstrap4;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            theme = Theme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            theme = Theme.HighContrast;
        }
        else
        {
            theme = Theme.Bootstrap4;
        }
    }
}
<style>

    #button-control {
        width: 100%;
        text-align: center;
    }

    #control-container {
        padding: 0px !important;
    }

    .e-export-icon::before {
        content: '\e728';
    }

    .e-print-icon::before {
        content: '\e813';
    }

    .btn-style
    {
        margin: 5px;
        width: 75px;
    }
</style>